/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PriceOracle, PriceOracleInterface } from "../PriceOracle";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "newPrice",
        type: "uint256",
      },
    ],
    name: "PriceChanged",
    type: "event",
  },
  {
    inputs: [],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "price",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_newPrice",
        type: "uint256",
      },
    ],
    name: "updatePrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50600060019054906101000a900460ff1680610037575060008054906101000a900460ff16155b610076576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161006d90610110565b60405180910390fd5b60008060019054906101000a900460ff1615905080156100c6576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b80156100e75760008060016101000a81548160ff0219169083151502179055505b50610190565b60006100fa602e83610130565b915061010582610141565b604082019050919050565b60006020820190508181036000830152610129816100ed565b9050919050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b610b868061019f6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063715018a6146100675780638129fc1c146100715780638d6cc56d1461007b5780638da5cb5b14610097578063a035b1fe146100b5578063f2fde38b146100d3575b600080fd5b61006f6100ef565b005b610079610177565b005b6100956004803603810190610090919061085c565b610268565b005b61009f610368565b6040516100ac919061092f565b60405180910390f35b6100bd610392565b6040516100ca91906109ca565b60405180910390f35b6100ed60048036038101906100e89190610833565b610398565b005b6100f7610490565b73ffffffffffffffffffffffffffffffffffffffff16610115610368565b73ffffffffffffffffffffffffffffffffffffffff161461016b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101629061098a565b60405180910390fd5b6101756000610498565b565b600060019054906101000a900460ff168061019d575060008054906101000a900460ff16155b6101dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101d39061096a565b60405180910390fd5b60008060019054906101000a900460ff16159050801561022c576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61023461055e565b683635c9adc5dea0000060658190555080156102655760008060016101000a81548160ff0219169083151502179055505b50565b610270610490565b73ffffffffffffffffffffffffffffffffffffffff1661028e610368565b73ffffffffffffffffffffffffffffffffffffffff16146102e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102db9061098a565b60405180910390fd5b60008111610327576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031e906109aa565b60405180910390fd5b806065819055507fa6dc15bdb68da224c66db4b3838d9a2b205138e8cff6774e57d0af91e196d6228160405161035d91906109ca565b60405180910390a150565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60655481565b6103a0610490565b73ffffffffffffffffffffffffffffffffffffffff166103be610368565b73ffffffffffffffffffffffffffffffffffffffff1614610414576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040b9061098a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610484576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047b9061094a565b60405180910390fd5b61048d81610498565b50565b600033905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600060019054906101000a900460ff1680610584575060008054906101000a900460ff16155b6105c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ba9061096a565b60405180910390fd5b60008060019054906101000a900460ff161590508015610613576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61061b610647565b610623610720565b80156106445760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff168061066d575060008054906101000a900460ff16155b6106ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a39061096a565b60405180910390fd5b60008060019054906101000a900460ff1615905080156106fc576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b801561071d5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680610746575060008054906101000a900460ff16155b610785576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077c9061096a565b60405180910390fd5b60008060019054906101000a900460ff1615905080156107d5576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6107e56107e0610490565b610498565b80156108065760008060016101000a81548160ff0219169083151502179055505b50565b60008135905061081881610b22565b92915050565b60008135905061082d81610b39565b92915050565b60006020828403121561084557600080fd5b600061085384828501610809565b91505092915050565b60006020828403121561086e57600080fd5b600061087c8482850161081e565b91505092915050565b61088e816109f6565b82525050565b60006108a16026836109e5565b91506108ac82610a32565b604082019050919050565b60006108c4602e836109e5565b91506108cf82610a81565b604082019050919050565b60006108e76020836109e5565b91506108f282610ad0565b602082019050919050565b600061090a601d836109e5565b915061091582610af9565b602082019050919050565b61092981610a28565b82525050565b60006020820190506109446000830184610885565b92915050565b6000602082019050818103600083015261096381610894565b9050919050565b60006020820190508181036000830152610983816108b7565b9050919050565b600060208201905081810360008301526109a3816108da565b9050919050565b600060208201905081810360008301526109c3816108fd565b9050919050565b60006020820190506109df6000830184610920565b92915050565b600082825260208201905092915050565b6000610a0182610a08565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f50726963652073686f756c6420626520626967676572207468616e2030000000600082015250565b610b2b816109f6565b8114610b3657600080fd5b50565b610b4281610a28565b8114610b4d57600080fd5b5056fea26469706673582212202f9fdc838b05f4994f2b88d0996aa4d5734aafe886a95d53b4c3977190665f3964736f6c63430008040033";

export class PriceOracle__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PriceOracle> {
    return super.deploy(overrides || {}) as Promise<PriceOracle>;
  }
  getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): PriceOracle {
    return super.attach(address) as PriceOracle;
  }
  connect(signer: Signer): PriceOracle__factory {
    return super.connect(signer) as PriceOracle__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PriceOracleInterface {
    return new utils.Interface(_abi) as PriceOracleInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): PriceOracle {
    return new Contract(address, _abi, signerOrProvider) as PriceOracle;
  }
}
