/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MarketplaceStorageInterface extends ethers.utils.Interface {
  functions: {
    "ERC721_Interface()": FunctionFragment;
    "acceptedToken()": FunctionFragment;
    "orderByAssetId(address,uint256)": FunctionFragment;
    "ownerCutPerMillion()": FunctionFragment;
    "publicationFeeInWei()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "ERC721_Interface", values?: undefined): string;
  encodeFunctionData(functionFragment: "acceptedToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "orderByAssetId", values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "ownerCutPerMillion", values?: undefined): string;
  encodeFunctionData(functionFragment: "publicationFeeInWei", values?: undefined): string;

  decodeFunctionResult(functionFragment: "ERC721_Interface", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "acceptedToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "orderByAssetId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerCutPerMillion", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "publicationFeeInWei", data: BytesLike): Result;

  events: {
    "ChangedOwnerCutPerMillion(uint256)": EventFragment;
    "ChangedPublicationFee(uint256)": EventFragment;
    "OrderCancelled(bytes32,uint256,address,address)": EventFragment;
    "OrderCreated(bytes32,uint256,address,address,uint256,uint256)": EventFragment;
    "OrderSuccessful(bytes32,uint256,address,address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChangedOwnerCutPerMillion"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedPublicationFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderSuccessful"): EventFragment;
}

export type ChangedOwnerCutPerMillionEvent = TypedEvent<[BigNumber] & { ownerCutPerMillion: BigNumber }>;

export type ChangedPublicationFeeEvent = TypedEvent<[BigNumber] & { publicationFee: BigNumber }>;

export type OrderCancelledEvent = TypedEvent<
  [string, BigNumber, string, string] & {
    id: string;
    assetId: BigNumber;
    seller: string;
    nftAddress: string;
  }
>;

export type OrderCreatedEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber, BigNumber] & {
    id: string;
    assetId: BigNumber;
    seller: string;
    nftAddress: string;
    priceInWei: BigNumber;
    expiresAt: BigNumber;
  }
>;

export type OrderSuccessfulEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber, string] & {
    id: string;
    assetId: BigNumber;
    seller: string;
    nftAddress: string;
    totalPrice: BigNumber;
    buyer: string;
  }
>;

export class MarketplaceStorage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MarketplaceStorageInterface;

  functions: {
    ERC721_Interface(overrides?: CallOverrides): Promise<[string]>;

    acceptedToken(overrides?: CallOverrides): Promise<[string]>;

    orderByAssetId(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, string, BigNumber, BigNumber] & {
        id: string;
        seller: string;
        nftAddress: string;
        price: BigNumber;
        expiresAt: BigNumber;
      }
    >;

    ownerCutPerMillion(overrides?: CallOverrides): Promise<[BigNumber]>;

    publicationFeeInWei(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  ERC721_Interface(overrides?: CallOverrides): Promise<string>;

  acceptedToken(overrides?: CallOverrides): Promise<string>;

  orderByAssetId(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [string, string, string, BigNumber, BigNumber] & {
      id: string;
      seller: string;
      nftAddress: string;
      price: BigNumber;
      expiresAt: BigNumber;
    }
  >;

  ownerCutPerMillion(overrides?: CallOverrides): Promise<BigNumber>;

  publicationFeeInWei(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    ERC721_Interface(overrides?: CallOverrides): Promise<string>;

    acceptedToken(overrides?: CallOverrides): Promise<string>;

    orderByAssetId(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, string, BigNumber, BigNumber] & {
        id: string;
        seller: string;
        nftAddress: string;
        price: BigNumber;
        expiresAt: BigNumber;
      }
    >;

    ownerCutPerMillion(overrides?: CallOverrides): Promise<BigNumber>;

    publicationFeeInWei(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "ChangedOwnerCutPerMillion(uint256)"(
      ownerCutPerMillion?: null,
    ): TypedEventFilter<[BigNumber], { ownerCutPerMillion: BigNumber }>;

    ChangedOwnerCutPerMillion(
      ownerCutPerMillion?: null,
    ): TypedEventFilter<[BigNumber], { ownerCutPerMillion: BigNumber }>;

    "ChangedPublicationFee(uint256)"(
      publicationFee?: null,
    ): TypedEventFilter<[BigNumber], { publicationFee: BigNumber }>;

    ChangedPublicationFee(publicationFee?: null): TypedEventFilter<[BigNumber], { publicationFee: BigNumber }>;

    "OrderCancelled(bytes32,uint256,address,address)"(
      id?: null,
      assetId?: BigNumberish | null,
      seller?: string | null,
      nftAddress?: null,
    ): TypedEventFilter<
      [string, BigNumber, string, string],
      { id: string; assetId: BigNumber; seller: string; nftAddress: string }
    >;

    OrderCancelled(
      id?: null,
      assetId?: BigNumberish | null,
      seller?: string | null,
      nftAddress?: null,
    ): TypedEventFilter<
      [string, BigNumber, string, string],
      { id: string; assetId: BigNumber; seller: string; nftAddress: string }
    >;

    "OrderCreated(bytes32,uint256,address,address,uint256,uint256)"(
      id?: null,
      assetId?: BigNumberish | null,
      seller?: string | null,
      nftAddress?: null,
      priceInWei?: null,
      expiresAt?: null,
    ): TypedEventFilter<
      [string, BigNumber, string, string, BigNumber, BigNumber],
      {
        id: string;
        assetId: BigNumber;
        seller: string;
        nftAddress: string;
        priceInWei: BigNumber;
        expiresAt: BigNumber;
      }
    >;

    OrderCreated(
      id?: null,
      assetId?: BigNumberish | null,
      seller?: string | null,
      nftAddress?: null,
      priceInWei?: null,
      expiresAt?: null,
    ): TypedEventFilter<
      [string, BigNumber, string, string, BigNumber, BigNumber],
      {
        id: string;
        assetId: BigNumber;
        seller: string;
        nftAddress: string;
        priceInWei: BigNumber;
        expiresAt: BigNumber;
      }
    >;

    "OrderSuccessful(bytes32,uint256,address,address,uint256,address)"(
      id?: null,
      assetId?: BigNumberish | null,
      seller?: string | null,
      nftAddress?: null,
      totalPrice?: null,
      buyer?: string | null,
    ): TypedEventFilter<
      [string, BigNumber, string, string, BigNumber, string],
      {
        id: string;
        assetId: BigNumber;
        seller: string;
        nftAddress: string;
        totalPrice: BigNumber;
        buyer: string;
      }
    >;

    OrderSuccessful(
      id?: null,
      assetId?: BigNumberish | null,
      seller?: string | null,
      nftAddress?: null,
      totalPrice?: null,
      buyer?: string | null,
    ): TypedEventFilter<
      [string, BigNumber, string, string, BigNumber, string],
      {
        id: string;
        assetId: BigNumber;
        seller: string;
        nftAddress: string;
        totalPrice: BigNumber;
        buyer: string;
      }
    >;
  };

  estimateGas: {
    ERC721_Interface(overrides?: CallOverrides): Promise<BigNumber>;

    acceptedToken(overrides?: CallOverrides): Promise<BigNumber>;

    orderByAssetId(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    ownerCutPerMillion(overrides?: CallOverrides): Promise<BigNumber>;

    publicationFeeInWei(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ERC721_Interface(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptedToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    orderByAssetId(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerCutPerMillion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    publicationFeeInWei(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
